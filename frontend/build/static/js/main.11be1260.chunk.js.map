{"version":3,"sources":["components/requestAccess.js","App.js","serviceWorker.js","index.js"],"names":["FormRequest","useState","email","setEmail","message","setMessage","submitRequest","e","a","preventDefault","console","log","fetch","method","headers","body","JSON","stringify","response","json","resData","status","alert","resetForm","className","onSubmit","htmlFor","type","name","placeholder","onChange","target","value","required","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"4MAoFeA,EAlFK,WAAO,IAAD,EACEC,mBAAS,IADX,mBACjBC,EADiB,KACVC,EADU,OAEMF,mBAAS,IAFf,mBAEjBG,EAFiB,KAERC,EAFQ,KAIlBC,EAAa,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,6DACpBD,EAAEE,iBACFC,QAAQC,IAAI,CAAET,QAAOE,YAFD,SAGGQ,MAAM,+BAAgC,CAC3DC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CAAEf,QAAOE,cARZ,cAGdc,EAHc,gBAUEA,EAASC,OAVX,OAWG,aADjBC,EAVc,QAWRC,QACVC,MAAM,iBACN,EAAKC,aACuB,SAAnBH,EAAQC,QACjBC,MAAM,2BAfY,2CAAH,sDAmBnB,OACE,6BACE,yBAAKE,UAAU,0DACf,yBAAKA,UAAU,8CACb,0BACEA,UAAU,wEACVC,SAAUnB,GAEV,wBAAIkB,UAAU,6DAAd,4BAGA,yBAAKA,UAAU,QACb,2BACEA,UAAU,6CACVE,QAAQ,SAFV,cAMA,2BACEF,UAAU,6HACVG,KAAK,OACLC,KAAK,QACLC,YAAY,gBACZC,SAAU,SAACvB,GAAD,OAAOJ,EAASI,EAAEwB,OAAOC,QACnCA,MAAO9B,EACP+B,UAAQ,KAGZ,yBAAKT,UAAU,QACb,2BACEA,UAAU,6CACVE,QAAQ,WAFV,kBAMA,8BACEF,UAAU,6HACVI,KAAK,UACLD,KAAK,OACLE,YAAY,uBACZC,SAAU,SAACvB,GAAD,OAAOF,EAAWE,EAAEwB,OAAOC,QACrCA,MAAO5B,EACP6B,UAAQ,KAGZ,yBAAKT,UAAU,qCACb,4BACEA,UAAU,2HACVG,KAAK,UAFP,uBC3DGO,MARf,WACE,OACE,yBAAKV,UAAU,iBACb,kBAAC,EAAD,QCKcW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1C,QAAQ0C,MAAMA,EAAMhD,a","file":"static/js/main.11be1260.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nconst FormRequest = () => {\r\n  const [email, setEmail] = useState(\"\");\r\n  const [message, setMessage] = useState(\"\");\r\n\r\n  const submitRequest = async (e) => {\r\n    e.preventDefault();\r\n    console.log({ email, message });\r\n    const response = await fetch(\"http://localhost:8080/access\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({ email, message }),\r\n    });\r\n    const resData = await response.json();\r\n    if (resData.status === \"success\") {\r\n      alert(\"Message Sent.\");\r\n      this.resetForm();\r\n    } else if (resData.status === \"fail\") {\r\n      alert(\"Message failed to send.\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"flex flex-col items-center justify-center bg-gray-200\"></div>\r\n      <div className=\"w-full max-w-sm m-auto flex flex-col my-32\">\r\n        <form\r\n          className=\"bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4 border-gray-200 border\"\r\n          onSubmit={submitRequest}\r\n        >\r\n          <h2 className=\"text-2xl pt-6 pb-10 text-center font-medium text-gray-800\">\r\n            Request for early access\r\n          </h2>\r\n          <div className=\"mb-4\">\r\n            <label\r\n              className=\"block text-gray-700 text-sm font-bold mb-2\"\r\n              htmlFor=\"Email\"\r\n            >\r\n              Your Email\r\n            </label>\r\n            <input\r\n              className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\r\n              type=\"text\"\r\n              name=\"email\"\r\n              placeholder=\"Email Address\"\r\n              onChange={(e) => setEmail(e.target.value)}\r\n              value={email}\r\n              required\r\n            />\r\n          </div>\r\n          <div className=\"mb-4\">\r\n            <label\r\n              className=\"block text-gray-700 text-sm font-bold mb-2\"\r\n              htmlFor=\"message\"\r\n            >\r\n              Message For Us\r\n            </label>\r\n            <textarea\r\n              className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\r\n              name=\"message\"\r\n              type=\"text\"\r\n              placeholder=\"Tell us your purpose\"\r\n              onChange={(e) => setMessage(e.target.value)}\r\n              value={message}\r\n              required\r\n            />\r\n          </div>\r\n          <div className=\"flex items-center justify-between\">\r\n            <button\r\n              className=\"bg-pink-500 hover:bg-pink-600 text-white font-bold py-2 px-4 mt-6 w-full rounded focus:outline-none focus:shadow-outline\"\r\n              type=\"submit\"\r\n            >\r\n              Send A Request\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FormRequest;\r\n","import React from 'react';\r\nimport './stylesheet/main.css';\r\nimport FormRequest from './components/requestAccess';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App h-screen \">\r\n      <FormRequest />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}